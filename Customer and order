SELECT * FROM BIT_DB.customers LIMIT 20;

SELECT * FROM BIT_DB.customers;
WHERE length(orderid) = 6 
AND orderid <> 'Order ID';

/*1) answering how many orders were placed in january?*/
SELECT COUNT(orderid)
FROM BIT_DB.JanSales
WHERE length(orderid) = 6 
AND orderid <> 'Order ID';

/*2) answering how many where iPhone*/
SELECT COUNT(orderid)
FROM BIT_DB.JanSales
WHERE Product = 'iPhone'
AND length(orderid) = 6 
AND orderid <> 'Order ID';

/*Selecting the customer account numbers for all the orders that were placed in February.*/
SELECT distinct acctnum
FROM BIT_DB.customers cust
INNER JOIN BIT_DB.FebSales Feb
ON cust.order_id=feb.orderID
WHERE length(orderid) = 6 
AND orderid <> 'Order ID';

/*Selecting which product was the cheapest one sold in January, and what the price was? issues-included SUM which it wasnt one, capitals were not needed*/
SELECT distinct product, price 
FROM BIT_DB.JanSales 
ORDER BY price ASC LIMIT 1;

/*What is the total revenue for each product sold in January? (Revenue can be calculated using the number of products sold and the price of the products).*/
SELECT Product, sum(quantity)* price as Revenue
FROM BIT_DB.JanSales
GROUP BY Product;

/*Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, how many of each were sold, and what was the total revenue?*/
SELECT 
sum(Quantity), Product,
sum(quantity)*price as Revenue
FROM BIT_DB.FebSales
WHERE location = '548 Lincoln St, Seattle, WA 98101'
GROUP BY Product;

/*How many customers ordered more than 2 products at a time in February, and what was the average amount spent for those customers?*/
select 
count(distinct cust.acctnum), 
avg(quantity*price)
FROM BIT_DB.FebSales Feb
LEFT JOIN BIT_DB.customers cust
ON FEB.orderid=cust.order_id
WHERE Feb.Quantity>2
AND length(orderid) = 6 
AND orderid <> 'Order ID'

SELECT orderdate
FROM BIT_DB.FebSales
WHERE orderdate between '02/13/19 00:00' AND '02/18/19 00:00';

SELECT location
FROM BIT_DB.FebSales 
WHERE orderdate = '02/18/19 01:35';

SELECT sum(quantity)
FROM BIT_DB.FebSales 
WHERE orderdate like '02/18/19%';

SELECT orderdate from BIT_DB.FebSales

WHERE orderdate like '02/18/19%';

SELECT distinct Product
FROM BIT_DB.FebSales
WHERE Product like'%Batteries%';

SELECT distinct Product, Price
FROM BIT_DB.FebSales 
WHERE Price like '%.99';






/*list all the products sold in Los Angeles in February, and include how many of each were sold.*/
SELECT Product, SUM(quantity)
FROM BIT_DB.FebSales
WHERE location like '%Los Angeles%'
GROUP BY Product;







/*Which locations in New York received at least 3 orders in January, and how many orders did they each receive?*/

SELECT distinct location, count(orderID)
FROM BIT_DB.JanSales
WHERE location LIKE '%NY%'
AND length(orderid) = 6 
AND orderid <> 'Order ID'
GROUP BY location
HAVING COUNT(orderID) >2;

/*How many of each type of headphone were sold in February?*/
SELECT Product, SUM(quantity)
FROM BIT_DB.FebSales
WHERE Product LIKE '%Headphones%'
GROUP BY Product;

/*What was the average amount spent per account in February?*/
SELECT avg(quantity*price)
FROM BIT_DB.FebSales Feb

LEFT JOIN BIT_DB.customers cust
ON FEB.orderid=cust.order_id

WHERE length(orderid) = 6 
AND orderid <> 'Order ID';

/*What was the average quantity of products purchased per account in February?*/
SELECT sum(quantity)/COUNT(cust.acctnum)
FROM BIT_DB.FebSales Feb

LEFT JOIN BIT_DB.customers cust
ON FEB.orderid=cust.order_id

WHERE length(orderid) = 6 
AND orderid <> 'Order ID';

/*Which product brought in the most revenue in January and how much revenue did it bring in total?*/
SELECT Product, sum(Quantity*price) revenue
FROM BIT_DB.JanSales
GROUP BY Product
ORDER BY sum(Quantity*price) desc
LIMIT 1;











CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL );

SELECT * FROM Spotifydata ;

/*What is the average danceability by artist and track?*/
SELECT artist_name, track_name, AVG(danceability)
FROM Spotifydata
GROUP BY track_name
ORDER BY danceability desc;

/*Who are the top 10 artists based on popularity?*/
SELECT artist_name, AVG(popularity)
FROM Spotifydata
GROUP BY artist_name
ORDER BY AVG(popularity) desc
LIMIT 10;

/*What artist released the longest song?*/
SELECT artist_name, duration_ms as 'longest song on playlist'
FROM Spotifydata
ORDER BY duration_ms desc
LIMIT 1;

/*What's the average danceability for the 10 most popular songs?*/
SELECT track_name, popularity, AVG(danceability)
FROM Spotifydata
GROUP BY track_name
ORDER BY popularity desc 
LIMIT 10;

/*Calculate the average popularity for the artists in the Spotify data table. 
Then, for every artist with an average popularity of 90 or above, show their name, their average popularity, and label them as a “Top Star”.*/

WITH popularity_average_CTE AS(
SELECT s.artist_name, 
avg(s.popularity) AS 'average_popularity'
FROM Spotifydata s
GROUP BY s.artist_name)

SELECT artist_name, 'topstar' AS tag
FROM popularity_average_CTE
WHERE average_popularity>=90;
